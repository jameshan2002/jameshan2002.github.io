{"version":3,"sources":["main.1f728a0b.chunk.css","webpack://src/styles/header.scss","webpack://src/styles/include-media.scss","webpack://src/styles/projects.scss","webpack://src/styles/about.scss","webpack://src/styles/skills.scss","webpack://src/styles/footer.scss","webpack://src/styles/index.scss"],"names":[],"mappings":"AAAA,2GAA2G,CCA3G,aACE,UAAW,CAEX,kBAAgB,CAHlB,6BAMI,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CARlC,mCAWM,QAAS,CACT,eAAgB,CAChB,cAAe,CAbrB,0DAiBQ,oBAAqB,CACrB,YAAa,CACb,UAAY,CACZ,8BAAgC,CAChC,cAAe,CACf,4BAA6B,CAC7B,YAAa,CACb,QAAW,CACX,cAAe,CAzBvB,gEA2BU,SAAU,CA3BpB,oDA+BQ,UAAY,CA/BpB,uBAqCI,eAAgB,CArCpB,qCAwCM,UAAW,CACX,4BAA6B,CAC7B,kBAAmB,CAEnB,kBAAgB,CA5CtB,0BA+CM,gBAAiB,CACjB,iBAAkB,CCyhBpB,+CDzkBJ,0BAkDQ,cAAe,CAQlB,CC+gBD,+CDzkBJ,0BAqDQ,cAAe,CAKlB,CC+gBD,gDDzkBJ,0BAwDQ,cAAe,CAElB,CA1DL,0BA4DM,cAAe,CACf,iBAAkB,CAClB,gBAAiB,CACjB,QAAS,CC0gBX,+CDzkBJ,0BAiEQ,gBAAiB,CACjB,gBAAiB,CACjB,QAAS,CAWZ,CC2fD,+CDzkBJ,0BAsEQ,gBAAiB,CACjB,gBAAiB,CACjB,QAAS,CAMZ,CC2fD,gDDzkBJ,0BA2EQ,gBAAiB,CACjB,gBAAiB,CAEpB,CA9EL,8BAgFM,cAAe,CACf,UAAY,CACb,cEjFH,eAAgB,CADlB,oBAGI,YAAa,CACb,UAAW,CACX,qBAAsB,CAEtB,aAAc,CDkkBd,+CCzkBJ,6BAWQ,cAAe,CACf,kBAAmB,CACnB,sBAAuB,CAb/B,wCAeU,iBAAkB,CAClB,WAAY,CAhBtB,gDAkBY,kBAAmB,CAlB/B,6CAqBY,gBAAkB,CACnB,CDmjBP,+CCzkBJ,6BA4BQ,cAAe,CACf,sBAAuB,CACvB,kBAAmB,CA9B3B,wCAgCU,iBAAkB,CAClB,WAAY,CACb,CAlCT,uBA0CI,YAAa,CACb,YAAa,CACb,sBAAuB,CACvB,qBAAsB,CD4hBtB,0BCzkBJ,uBA+CM,SAAU,CACV,WAAY,CA0Cf,CA1FH,6BAqDM,WAAY,CACZ,WAAY,CACZ,yBAA2B,CAC3B,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,qBAAsB,CACtB,2BAA4B,CAC5B,uBAA2B,CA7DjC,kCAiEM,gBAAiB,CACjB,eAAgB,CAlEtB,0CAoEQ,iBAAmB,CACnB,eAAgB,CArExB,wCAwEQ,eAAgB,CAChB,eAAgB,CAzExB,uCA4EQ,qBAAuB,CACvB,iBAAkB,CAClB,YAAa,CACb,aAAc,CACd,oBAAqB,CACrB,UAAY,CACZ,wBAAyB,CACzB,gBAAkB,CAClB,oBAAsB,CApF9B,6CAuFQ,gBAAiB,CAClB,iBCvFL,eAAgB,CAChB,UAAW,CACX,YAAa,CACb,YAAa,CACb,4BAA6B,CAC7B,kBAAmB,CACnB,eAAgB,CAPlB,oCAUM,aAAc,CACd,gBAAiB,CAXvB,mCAcM,eAAgB,CAdtB,4BAkBI,gBAAiB,CACjB,WAAY,CACZ,YAAa,CACb,yBAA2B,CAC3B,uBAAwB,CACxB,2BAA4B,CAC5B,uBAA2B,CFijB3B,+CEzkBJ,iBA4BI,cAAe,CACf,kBAAgB,CA7BpB,iCA+BM,OAAQ,CACR,iBAAkB,CAClB,WAAY,CAjClB,4BAoCM,OAAQ,CACR,kBAAmB,CACnB,aAAc,CACf,CFkiBD,+CEzkBJ,iBA2CI,cAAe,CACf,kBAAgB,CA5CpB,iCA8CM,OAAQ,CACR,iBAAkB,CAClB,WAAY,CAhDlB,4BAmDM,OAAQ,CACR,kBAAmB,CACnB,aAAc,CACf,CFmhBD,gDEzkBJ,iBA0DI,cAAe,CACf,kBAAgB,CA3DpB,iCA6DM,OAAQ,CACR,iBAAkB,CAClB,WAAY,CA/DlB,4BAkEM,OAAQ,CACR,kBAAmB,CACnB,aAAc,CACf,CCrEL,WACE,UAAW,CACX,YAAa,CAEb,iBAAe,CAChB,gBAGC,YAAa,CACb,4BAA6B,CAC7B,sBAAuB,CAHzB,oBAKI,eAAgB,CAChB,WAAY,CACZ,iBAAkB,CAClB,aAAc,CARlB,uBAUM,iBAAkB,CAVxB,sBAaM,gBAAiB,CHqjBnB,+CGlkBJ,gBAiBI,qBAAsB,CAQzB,CHyiBG,+CGlkBJ,gBAoBI,qBAAsB,CAKzB,CHyiBG,gDGlkBJ,gBAuBI,cAAe,CAElB,CChCD,aACE,YAAa,CAEb,kBAAmB,CAHrB,0BAKI,UAAY,CACZ,gBAAiB,CJmkBjB,+CIzkBJ,0BAQM,cAAe,CAElB,CAVH,2BAcI,4BAA6B,CAC7B,kBAAmB,CAEnB,kBAAgB,CAjBpB,kCAoBM,cAAe,CACf,UAAY,CCblB,EACE,wBAAyB,CAC1B,KAGC,cAAe,CAChB,KAGC,QAAS,CACT,SAAU,CACV,iBAAkB,CAClB,iBAAkB,CAClB,iBAAkB,CACnB,KAGC,yEACW","file":"main.1f728a0b.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Open+Sans&display=swap);\n.full-Header{width:80vw;margin:0 auto;margin-top:10vh}.full-Header .navbar-wrapper{display:flex;align-items:center;justify-content:space-between}.full-Header .navbar-wrapper .name{margin:0;font-weight:600;cursor:pointer}.full-Header .navbar-wrapper .links-wrapper .header-links{text-decoration:none;padding:10px;opacity:0.6;transition:all 0.2s ease-in-out;font-size:12px;background-color:transparent;outline:none;border:0px;cursor:pointer}.full-Header .navbar-wrapper .links-wrapper .header-links:hover{opacity:1}.full-Header .navbar-wrapper .links-wrapper .active{color:black}.full-Header .headings{margin-top:12vh}.full-Header .headings .site-wrapper{width:10em;justify-content:space-evenly;align-items:center;margin:0 auto;margin-top:70px}.full-Header .headings h2{font-size:1.3rem;text-align:center}@media (min-width: 250px) and (max-width: 424px){.full-Header .headings h2{font-size:14px}}@media (min-width: 425px) and (max-width: 767px){.full-Header .headings h2{font-size:16px}}@media (min-width: 768px) and (max-width: 1023px){.full-Header .headings h2{font-size:16px}}.full-Header .headings h1{font-size:4rem;text-align:center;line-height:70px;margin:0}@media (min-width: 250px) and (max-width: 424px){.full-Header .headings h1{font-size:1.5rem;line-height:30px;margin:0}}@media (min-width: 425px) and (max-width: 767px){.full-Header .headings h1{font-size:1.5rem;line-height:30px;margin:0}}@media (min-width: 768px) and (max-width: 1023px){.full-Header .headings h1{font-size:2.5rem;line-height:50px}}.full-Header .headings .logos{cursor:pointer;color:black}.work-wrapper{margin-top:12vh}.work-wrapper .grid{display:flex;width:80vw;flex-direction:column;margin-top:20px;margin:0 auto}@media (min-width: 250px) and (max-width: 424px){.work-wrapper .grid .content{flex-wrap:wrap;margin-bottom:40px;justify-content:center}.work-wrapper .grid .content .container{text-align:center;margin:auto}.work-wrapper .grid .content .container .header{line-height:1.9rem}.work-wrapper .grid .content .container .btn{font-size:0.75rem}}@media (min-width: 425px) and (max-width: 767px){.work-wrapper .grid .content{flex-wrap:wrap;justify-content:center;margin-bottom:40px}.work-wrapper .grid .content .container{text-align:center;margin:auto}}.work-wrapper .content{padding:10px;display:flex;align-items:flex-start;justify-content:start}@media (min-width: 2501px){.work-wrapper .content{width:70%;margin:auto}}.work-wrapper .content .card{width:28rem;height:15em;overflow:hidden !important;display:flex;align-items:center;justify-content:center;background-size:cover;background-repeat:no-repeat;background-position:center}.work-wrapper .content .container{margin-left:20px;text-align:left}.work-wrapper .content .container .header{line-height:0.8rem;font-size:1.8em}.work-wrapper .content .container .text{max-width:800px;font-size:1.1em}.work-wrapper .content .container .btn{background-color:black;border-radius:5px;padding:10px;line-height:0;text-decoration:none;color:white;text-transform:uppercase;font-size:0.85rem;letter-spacing:0.02em}.work-wrapper .content .container .seperator{margin-left:10px}.about-container{margin-top:10vh;width:80vw;padding:20px;display:flex;justify-content:space-evenly;align-items:center;text-align:left}.about-container .about-contents h1{margin:0 auto;font-size:3.5rem}.about-container .about-contents p{max-width:49rem}.about-container .about-img{margin-left:60px;width:160px;height:160px;overflow:hidden !important;background-size:contain;background-repeat:no-repeat;background-position:center}@media (min-width: 250px) and (max-width: 424px){.about-container{margin:0 auto;flex-wrap:wrap;margin-top:40px}.about-container .about-contents{order:2;text-align:center;margin:auto}.about-container .about-img{order:1;margin-bottom:30px;margin-left:0}}@media (min-width: 425px) and (max-width: 767px){.about-container{margin:0 auto;flex-wrap:wrap;margin-top:40px}.about-container .about-contents{order:2;text-align:center;margin:auto}.about-container .about-img{order:1;margin-bottom:30px;margin-left:0}}@media (min-width: 768px) and (max-width: 1023px){.about-container{margin:0 auto;flex-wrap:wrap;margin-top:40px}.about-container .about-contents{order:2;text-align:center;margin:auto}.about-container .about-img{order:1;margin-bottom:30px;margin-left:0}}.skill-top{width:80vw;padding:20px;margin:0 auto;margin-top:8vh}.skills-content{display:flex;justify-content:space-around;align-items:flex-start}.skills-content div{max-width:260px;padding:5px;text-align:center;margin:0 auto}.skills-content div h3{font-size:1.35rem}.skills-content div p{font-size:1.1rem}@media (min-width: 250px) and (max-width: 424px){.skills-content{flex-direction:column}}@media (min-width: 425px) and (max-width: 767px){.skills-content{flex-direction:column}}@media (min-width: 768px) and (max-width: 1023px){.skills-content{flex-wrap:wrap}}.footer-Full{padding:20px;margin-bottom:80px}.footer-Full .footer-Link{color:black;font-size:1.5rem}@media (min-width: 250px) and (max-width: 424px){.footer-Full .footer-Link{font-size:1rem}}.footer-Full .site-wrapper{justify-content:space-evenly;align-items:center;margin:0 auto;margin-top:30px}.footer-Full .site-wrapper .logos{cursor:pointer;color:black}*{font-family:\"Montserrat\"}html{font-size:16px}body{margin:0;padding:0;overflow-y:scroll;overflow-x:hidden;text-align:center}code{font-family:source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace}\n\n",".full-Header {\n  width: 80vw;\n  margin: 0 auto;\n  margin-top: 10vh;\n\n  .navbar-wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    .name {\n      margin: 0;\n      font-weight: 600;\n      cursor: pointer;\n    }\n    .links-wrapper {\n      .header-links {\n        text-decoration: none;\n        padding: 10px;\n        opacity: 0.6;\n        transition: all 0.2s ease-in-out;\n        font-size: 12px;\n        background-color: transparent;\n        outline: none;\n        border: 0px;\n        cursor: pointer;\n        &:hover {\n          opacity: 1;\n        }\n      }\n      .active {\n        color: black;\n      }\n    }\n  }\n\n  .headings {\n    margin-top: 12vh;\n    .site-wrapper {\n      //   display: flex;\n      width: 10em;\n      justify-content: space-evenly;\n      align-items: center;\n      margin: 0 auto;\n      margin-top: 70px;\n    }\n    h2 {\n      font-size: 1.3rem;\n      text-align: center;\n      @include media(\">=250px\", \"<lgphone\") {\n        font-size: 14px;\n      }\n      @include media(\">=lgphone\", \"<tablet\") {\n        font-size: 16px;\n      }\n      @include media(\">=tablet\", \"<desktop\") {\n        font-size: 16px;\n      }\n    }\n    h1 {\n      font-size: 4rem;\n      text-align: center;\n      line-height: 70px;\n      margin: 0;\n      @include media(\">=250px\", \"<lgphone\") {\n        font-size: 1.5rem;\n        line-height: 30px;\n        margin: 0;\n      }\n      @include media(\">=lgphone\", \"<tablet\") {\n        font-size: 1.5rem;\n        line-height: 30px;\n        margin: 0;\n      }\n      @include media(\">=tablet\", \"<desktop\") {\n        font-size: 2.5rem;\n        line-height: 50px;\n      }\n    }\n    .logos {\n      cursor: pointer;\n      color: black;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  \"phone\": 320px,\n  \"lgphone\": 425px,\n  \"tablet\": 768px,\n  \"desktop\": 1024px,\n  \"smdesktop\": 1280px,\n  \"mddesktop\": 1440px,\n  \"lgdesktop\": 1920px,\n  \"4k\": 2560px,\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  \"screen\": \"screen\",\n  \"print\": \"print\",\n  \"handheld\": \"handheld\",\n  \"landscape\": \"(orientation: landscape)\",\n  \"portrait\": \"(orientation: portrait)\",\n  \"retina2x\":\n    \"(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)\",\n  \"retina3x\":\n    \"(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)\",\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  \"px\": 1,\n  \"em\": 0.01,\n  \"rem\": 0.1,\n  \"\": 0,\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: \"desktop\" !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: (\"screen\", \"portrait\", \"landscape\") !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists(\"at-error\") {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {\n  }\n}\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {\n}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log(\"`#{$im-no-media-breakpoint}` is not a valid breakpoint.\") {\n    }\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == \"max\" and $value <= $no-media-breakpoint-value) or\n        ($prefix == \"min\" and $value > $no-media-breakpoint-value)\n      {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in (\">=\", \">\", \"<=\", \"<\", \"≥\", \"≤\") {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log(\"No operator found in `#{$expression}`.\");\n}\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: \"width\";\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index((\"<\", \"<=\", \"≤\"), $operator), \"max\", \"min\");\n}\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log(\"Unknown unit `#{unit($value)}`.\");\n  }\n\n  @if $operator == \">\" {\n    $value: $value + $interval;\n  } @else if $operator == \"<\" {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return \"(#{$prefix}-#{$dimension}: #{$value})\";\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == \"number\" {\n    @return $value;\n  } @else if type-of($value) != \"string\" {\n    $_: im-log(\"Value for `to-number` should be a number or a string.\");\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == \"-\");\n  $numbers: (\n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,\n    \"9\": 9,\n  );\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == \"+\" or $first-character == \"-\") {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not(index(map-keys($numbers), $character) or $character == \".\") {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i));\n    }\n\n    @if $character == \".\" {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: (\n    \"px\": 1px,\n    \"cm\": 1cm,\n    \"mm\": 1mm,\n    \"%\": 1%,\n    \"ch\": 1ch,\n    \"pc\": 1pc,\n    \"in\": 1in,\n    \"em\": 1em,\n    \"rem\": 1rem,\n    \"pt\": 1pt,\n    \"ex\": 1ex,\n    \"vw\": 1vw,\n    \"vh\": 1vh,\n    \"vmin\": 1vmin,\n    \"vmax\": 1vmax,\n  );\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log(\"Invalid unit `#{$unit}`.\");\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge(\n    $media-expressions,\n    $tweak-media-expressions\n  ) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\n  {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n",".work-wrapper {\n  margin-top: 12vh;\n  .grid {\n    display: flex;\n    width: 80vw;\n    flex-direction: column;\n    margin-top: 20px;\n    margin: 0 auto;\n\n    @include media(\">=250px\", \"<lgphone\") {\n      .content {\n        flex-wrap: wrap;\n        margin-bottom: 40px;\n        justify-content: center;\n        .container {\n          text-align: center;\n          margin: auto;\n          .header {\n            line-height: 1.9rem;\n          }\n          .btn {\n            font-size: 0.75rem;\n          }\n        }\n      }\n    }\n    @include media(\">=lgphone\", \"<tablet\") {\n      .content {\n        flex-wrap: wrap;\n        justify-content: center;\n        margin-bottom: 40px;\n        .container {\n          text-align: center;\n          margin: auto;\n        }\n      }\n    }\n    @include media(\">=tablet\", \"<desktop\") {\n    }\n  }\n\n  .content {\n    padding: 10px;\n    display: flex;\n    align-items: flex-start;\n    justify-content: start;\n    @include media(\">2500px\") {\n      width: 70%;\n      margin: auto;\n    }\n    @include media(\">=250px\", \"<=2500px\") {\n    }\n    .card {\n      width: 28rem;\n      height: 15em;\n      overflow: hidden !important;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n\n    .container {\n      margin-left: 20px;\n      text-align: left;\n      .header {\n        line-height: 0.8rem;\n        font-size: 1.8em;\n      }\n      .text {\n        max-width: 800px;\n        font-size: 1.1em;\n      }\n      .btn {\n        background-color: black;\n        border-radius: 5px;\n        padding: 10px;\n        line-height: 0;\n        text-decoration: none;\n        color: white;\n        text-transform: uppercase;\n        font-size: 0.85rem;\n        letter-spacing: 0.02em;\n      }\n      .seperator {\n        margin-left: 10px;\n      }\n    }\n  }\n}\n",".about-container {\n  margin-top: 10vh;\n  width: 80vw;\n  padding: 20px;\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  text-align: left;\n  .about-contents {\n    h1 {\n      margin: 0 auto;\n      font-size: 3.5rem;\n    }\n    p {\n      max-width: 49rem;\n    }\n  }\n  .about-img {\n    margin-left: 60px;\n    width: 160px;\n    height: 160px;\n    overflow: hidden !important;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n  }\n  @include media(\">=250px\", \"<lgphone\") {\n    margin: 0 auto;\n    flex-wrap: wrap;\n    margin-top: 40px;\n    .about-contents {\n      order: 2;\n      text-align: center;\n      margin: auto;\n    }\n    .about-img {\n      order: 1;\n      margin-bottom: 30px;\n      margin-left: 0;\n    }\n  }\n  @include media(\">=lgphone\", \"<tablet\") {\n    margin: 0 auto;\n    flex-wrap: wrap;\n    margin-top: 40px;\n    .about-contents {\n      order: 2;\n      text-align: center;\n      margin: auto;\n    }\n    .about-img {\n      order: 1;\n      margin-bottom: 30px;\n      margin-left: 0;\n    }\n  }\n  @include media(\">=tablet\", \"<desktop\") {\n    margin: 0 auto;\n    flex-wrap: wrap;\n    margin-top: 40px;\n    .about-contents {\n      order: 2;\n      text-align: center;\n      margin: auto;\n    }\n    .about-img {\n      order: 1;\n      margin-bottom: 30px;\n      margin-left: 0;\n    }\n  }\n}\n",".skill-top {\n  width: 80vw;\n  padding: 20px;\n  margin: 0 auto;\n  margin-top: 8vh;\n}\n\n.skills-content {\n  display: flex;\n  justify-content: space-around;\n  align-items: flex-start;\n  div {\n    max-width: 260px;\n    padding: 5px;\n    text-align: center;\n    margin: 0 auto;\n    h3 {\n      font-size: 1.35rem;\n    }\n    p {\n      font-size: 1.1rem;\n    }\n  }\n  @include media(\">=250px\", \"<lgphone\") {\n    flex-direction: column;\n  }\n  @include media(\">=lgphone\", \"<tablet\") {\n    flex-direction: column;\n  }\n  @include media(\">=tablet\", \"<desktop\") {\n    flex-wrap: wrap;\n  }\n}\n",".footer-Full {\n  padding: 20px;\n\n  margin-bottom: 80px;\n  .footer-Link {\n    color: black;\n    font-size: 1.5rem;\n    @include media(\">=250px\", \"<lgphone\") {\n      font-size: 1rem;\n    }\n  }\n  .site-wrapper {\n    //display: flex;\n    //width: 10em;\n    justify-content: space-evenly;\n    align-items: center;\n    margin: 0 auto;\n    margin-top: 30px;\n\n    .logos {\n      cursor: pointer;\n      color: black;\n    }\n  }\n}\n","@import \"./include-media.scss\";\n@import \"header.scss\";\n@import \"projects.scss\";\n@import \"about.scss\";\n@import \"skills.scss\";\n@import \"footer.scss\";\n@import url(\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Open+Sans&display=swap\");\n\n* {\n  font-family: \"Montserrat\";\n}\n\nhtml {\n  font-size: 16px;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  text-align: center;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n}\n"]}