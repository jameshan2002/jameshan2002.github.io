{"version":3,"sources":["main.c9337886.chunk.css","webpack://src/styles/header.scss","webpack://src/styles/include-media.scss","webpack://src/styles/projects.scss","webpack://src/styles/about.scss","webpack://src/styles/skills.scss","webpack://src/styles/footer.scss","webpack://src/styles/index.scss"],"names":[],"mappings":"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","file":"main.c9337886.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Open+Sans&display=swap);\n.full-Header{width:80vw;margin:0 auto;margin-top:10vh}.full-Header .navbar-wrapper{display:flex;align-items:center;justify-content:space-between}.full-Header .navbar-wrapper .name{margin:0;font-weight:600;cursor:pointer}.full-Header .navbar-wrapper .links-wrapper .header-links{text-decoration:none;padding:10px;opacity:0.6;transition:all 0.2s ease-in-out;font-size:0.8em;background-color:transparent;outline:none;border:0px;cursor:pointer}.full-Header .navbar-wrapper .links-wrapper .header-links:hover{opacity:1}.full-Header .navbar-wrapper .links-wrapper .active{color:black}.full-Header .headings{margin-top:15vh}.full-Header .headings .site-wrapper{width:10em;justify-content:space-evenly;align-items:center;margin:0 auto;margin-top:70px}.full-Header .headings h2{font-size:1.1em;text-align:center}@media (min-width: 250px) and (max-width: 424px){.full-Header .headings h2{font-size:14px}}@media (min-width: 425px) and (max-width: 767px){.full-Header .headings h2{font-size:16px}}@media (min-width: 768px) and (max-width: 1023px){.full-Header .headings h2{font-size:16px}}.full-Header .headings h1{font-size:4em;text-align:center;line-height:70px;margin:0}@media (min-width: 250px) and (max-width: 424px){.full-Header .headings h1{font-size:1.5em;line-height:30px;margin:0}}@media (min-width: 425px) and (max-width: 767px){.full-Header .headings h1{font-size:1.5em;line-height:30px;margin:0}}@media (min-width: 768px) and (max-width: 1023px){.full-Header .headings h1{font-size:2.5em;line-height:50px}}.full-Header .headings .logos{cursor:pointer;color:black}.work-wrapper{margin-top:15vh}.work-wrapper h1{margin-bottom:45px}.work-wrapper .grid{display:flex;width:80vw;flex-direction:column;margin-top:20px;margin:0 auto}@media (min-width: 250px) and (max-width: 424px){.work-wrapper .grid .content{flex-wrap:wrap;margin-bottom:40px;justify-content:center}.work-wrapper .grid .content .container{text-align:center;margin:auto}.work-wrapper .grid .content .container .header{line-height:1.9rem}.work-wrapper .grid .content .container .btn{font-size:0.75rem}}@media (min-width: 425px) and (max-width: 767px){.work-wrapper .grid .content{flex-wrap:wrap;justify-content:center;margin-bottom:40px}.work-wrapper .grid .content .container{text-align:center;margin:auto}}.work-wrapper .content{padding:10px 10px 35px 10px;display:flex;align-items:flex-start;justify-content:start}@media (min-width: 2501px){.work-wrapper .content{width:70%;margin:auto}}@media (min-width: 750px) and (max-width: 1300px){.work-wrapper .content{flex-wrap:wrap;margin:0 auto;justify-content:center;margin-bottom:40px;padding:10px}}.work-wrapper .content .card{width:28rem;height:15em;overflow:hidden !important;display:flex;align-items:center;justify-content:center;background-size:cover;background-repeat:no-repeat;background-position:center}.work-wrapper .content .container{margin-left:20px;text-align:left}.work-wrapper .content .container .header{line-height:0.8rem;font-size:1.5em}.work-wrapper .content .container .text{max-width:600px;font-size:1.0em}.work-wrapper .content .container .used{max-width:600px;font-size:1.0em;margin-bottom:25px}.work-wrapper .content .container .btn{background-color:black;border-radius:5px;padding:10px;line-height:0;text-decoration:none;color:white;text-transform:uppercase;font-size:0.80rem;letter-spacing:0.02em}.work-wrapper .content .container .seperator{margin-left:10px}@media (min-width: 750px) and (max-width: 1300px){.work-wrapper .content .container{text-align:center;margin-left:0px}}.about-container{margin-top:10vh;width:80vw;padding:20px;display:flex;justify-content:space-evenly;align-items:center;text-align:left}.about-container .about-contents h1{margin:0 auto;font-size:3.5em}.about-container .about-contents p{max-width:49rem;font-size:1em}.about-container .about-img{margin-left:60px;width:160px;height:160px;overflow:hidden !important;background-size:contain;background-repeat:no-repeat;background-position:center}@media (min-width: 250px) and (max-width: 424px){.about-container{margin:0 auto;flex-wrap:wrap;margin-top:40px}.about-container .about-contents{order:2;text-align:center;margin:auto}.about-container .about-img{order:1;margin-bottom:30px;margin-left:0}}@media (min-width: 425px) and (max-width: 767px){.about-container{margin:0 auto;flex-wrap:wrap;margin-top:40px}.about-container .about-contents{order:2;text-align:center;margin:auto}.about-container .about-img{order:1;margin-bottom:30px;margin-left:0}}@media (min-width: 768px) and (max-width: 1023px){.about-container{margin:0 auto;flex-wrap:wrap;margin-top:40px}.about-container .about-contents{order:2;text-align:center;margin:auto}.about-container .about-img{order:1;margin-bottom:30px;margin-left:0}}.skill-top{width:80vw;padding:20px 20px 85px 20px;margin:0 auto;margin-top:8vh}.skill-top h1{margin-bottom:10px}.skills-content{display:flex;justify-content:space-around;align-items:flex-start}.skills-content div{max-width:260px;padding:5px;text-align:center;margin:0 auto}.skills-content div h3{font-size:1.35rem}.skills-content div p{font-size:1rem}@media (min-width: 250px) and (max-width: 424px){.skills-content{flex-direction:column}}@media (min-width: 425px) and (max-width: 767px){.skills-content{flex-direction:column}}@media (min-width: 768px) and (max-width: 1023px){.skills-content{flex-wrap:wrap}}.footer-Full{padding:20px;margin-bottom:80px}.footer-Full h1{margin-bottom:37px}.footer-Full .footer-Link{color:black;font-size:1.2em}@media (min-width: 250px) and (max-width: 424px){.footer-Full .footer-Link{font-size:1em}}.footer-Full .site-wrapper{justify-content:space-evenly;align-items:center;margin:0 auto;margin-top:30px}.footer-Full .site-wrapper .logos{cursor:pointer;color:black}*{font-family:\"Montserrat\"}html{font-size:16px}body{margin:0;padding:0;overflow-y:scroll;overflow-x:hidden;text-align:center}code{font-family:source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\r monospace}\n\n",".full-Header {\r\n  width: 80vw;\r\n  margin: 0 auto;\r\n  margin-top: 10vh;\r\n\r\n  .navbar-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    .name {\r\n      margin: 0;\r\n      font-weight: 600;\r\n      cursor: pointer;\r\n    }\r\n    .links-wrapper {\r\n      .header-links {\r\n        text-decoration: none;\r\n        padding: 10px;\r\n        opacity: 0.6;\r\n        transition: all 0.2s ease-in-out;\r\n        font-size: 0.8em;\r\n        background-color: transparent;\r\n        outline: none;\r\n        border: 0px;\r\n        cursor: pointer;\r\n        &:hover {\r\n          opacity: 1;\r\n        }\r\n      }\r\n      .active {\r\n        color: black;\r\n      }\r\n    }\r\n  }\r\n\r\n  .headings {\r\n    margin-top: 15vh;\r\n    .site-wrapper {\r\n      //   display: flex;\r\n      width: 10em;\r\n      justify-content: space-evenly;\r\n      align-items: center;\r\n      margin: 0 auto;\r\n      margin-top: 70px;\r\n    }\r\n    h2 {\r\n      font-size: 1.1em;\r\n      text-align: center;\r\n      @include media(\">=250px\", \"<lgphone\") {\r\n        font-size: 14px;\r\n      }\r\n      @include media(\">=lgphone\", \"<tablet\") {\r\n        font-size: 16px;\r\n      }\r\n      @include media(\">=tablet\", \"<desktop\") {\r\n        font-size: 16px;\r\n      }\r\n    }\r\n    h1 {\r\n      font-size: 4em;\r\n      text-align: center;\r\n      line-height: 70px;\r\n      margin: 0;\r\n      @include media(\">=250px\", \"<lgphone\") {\r\n        font-size: 1.5em;\r\n        line-height: 30px;\r\n        margin: 0;\r\n      }\r\n      @include media(\">=lgphone\", \"<tablet\") {\r\n        font-size: 1.5em;\r\n        line-height: 30px;\r\n        margin: 0;\r\n      }\r\n      @include media(\">=tablet\", \"<desktop\") {\r\n        font-size: 2.5em;\r\n        line-height: 50px;\r\n      }\r\n    }\r\n    .logos {\r\n      cursor: pointer;\r\n      color: black;\r\n    }\r\n  }\r\n}\r\n","@charset \"UTF-8\";\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.9\r\n//\r\n//        https://eduardoboucas.github.io/include-media\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Hugo Giraudel (@hugogiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  \"phone\": 320px,\r\n  \"lgphone\": 425px,\r\n  \"tablet\": 768px,\r\n  \"desktop\": 1024px,\r\n  \"smdesktop\": 1280px,\r\n  \"mddesktop\": 1440px,\r\n  \"lgdesktop\": 1920px,\r\n  \"4k\": 2560px,\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  \"screen\": \"screen\",\r\n  \"print\": \"print\",\r\n  \"handheld\": \"handheld\",\r\n  \"landscape\": \"(orientation: landscape)\",\r\n  \"portrait\": \"(orientation: portrait)\",\r\n  \"retina2x\":\r\n    \"(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)\",\r\n  \"retina3x\":\r\n    \"(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)\",\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  \"px\": 1,\r\n  \"em\": 0.01,\r\n  \"rem\": 0.1,\r\n  \"\": 0,\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: \"desktop\" !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: (\"screen\", \"portrait\", \"landscape\") !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists(\"at-error\") {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {\r\n  }\r\n}\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {\r\n}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log(\"`#{$im-no-media-breakpoint}` is not a valid breakpoint.\") {\r\n    }\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == \"max\" and $value <= $no-media-breakpoint-value) or\r\n        ($prefix == \"min\" and $value > $no-media-breakpoint-value)\r\n      {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in (\">=\", \">\", \"<=\", \"<\", \"≥\", \"≤\") {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log(\"No operator found in `#{$expression}`.\");\r\n}\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: \"width\";\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index((\"<\", \"<=\", \"≤\"), $operator), \"max\", \"min\");\r\n}\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log(\"Unknown unit `#{unit($value)}`.\");\r\n  }\r\n\r\n  @if $operator == \">\" {\r\n    $value: $value + $interval;\r\n  } @else if $operator == \"<\" {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return \"(#{$prefix}-#{$dimension}: #{$value})\";\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == \"number\" {\r\n    @return $value;\r\n  } @else if type-of($value) != \"string\" {\r\n    $_: im-log(\"Value for `to-number` should be a number or a string.\");\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == \"-\");\r\n  $numbers: (\r\n    \"0\": 0,\r\n    \"1\": 1,\r\n    \"2\": 2,\r\n    \"3\": 3,\r\n    \"4\": 4,\r\n    \"5\": 5,\r\n    \"6\": 6,\r\n    \"7\": 7,\r\n    \"8\": 8,\r\n    \"9\": 9,\r\n  );\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == \"+\" or $first-character == \"-\") {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not(index(map-keys($numbers), $character) or $character == \".\") {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i));\r\n    }\r\n\r\n    @if $character == \".\" {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: (\r\n    \"px\": 1px,\r\n    \"cm\": 1cm,\r\n    \"mm\": 1mm,\r\n    \"%\": 1%,\r\n    \"ch\": 1ch,\r\n    \"pc\": 1pc,\r\n    \"in\": 1in,\r\n    \"em\": 1em,\r\n    \"rem\": 1rem,\r\n    \"pt\": 1pt,\r\n    \"ex\": 1ex,\r\n    \"vw\": 1vw,\r\n    \"vh\": 1vh,\r\n    \"vmin\": 1vmin,\r\n    \"vmax\": 1vmax,\r\n  );\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log(\"Invalid unit `#{$unit}`.\");\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge(\r\n    $media-expressions,\r\n    $tweak-media-expressions\r\n  ) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\r\n  {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n",".work-wrapper {\r\n  margin-top: 15vh;\r\n  h1 {\r\n    margin-bottom: 45px;\r\n  }\r\n  .grid {\r\n    display: flex;\r\n    width: 80vw;\r\n    flex-direction: column;\r\n    margin-top: 20px;\r\n    margin: 0 auto;\r\n\r\n    @include media(\">=250px\", \"<lgphone\") {\r\n      .content {\r\n        flex-wrap: wrap;\r\n        margin-bottom: 40px;\r\n        justify-content: center;\r\n        .container {\r\n          text-align: center;\r\n          margin: auto;\r\n          .header {\r\n            line-height: 1.9rem;\r\n          }\r\n          .btn {\r\n            font-size: 0.75rem;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    @include media(\">=lgphone\", \"<tablet\") {\r\n      .content {\r\n        flex-wrap: wrap;\r\n        justify-content: center;\r\n        margin-bottom: 40px;\r\n        .container {\r\n          text-align: center;\r\n          margin: auto;\r\n        }\r\n      }\r\n    }\r\n    @include media(\">=tablet\", \"<desktop\") {\r\n    }\r\n  }\r\n\r\n  .content {\r\n    padding: 10px 10px 35px 10px;\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: start;\r\n    @include media(\">2500px\") {\r\n      width: 70%;\r\n      margin: auto;\r\n    }\r\n    @include media(\">=desktop\", \"<=2500px\") {\r\n    }\r\n    @include media(\">=750px\", \"<=1300px\") {\r\n      flex-wrap: wrap;\r\n      margin: 0 auto;\r\n      justify-content: center;\r\n      margin-bottom: 40px;\r\n      padding: 10px;\r\n    }\r\n    .card {\r\n      width: 28rem;\r\n      height: 15em;\r\n      overflow: hidden !important;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      background-size: cover;\r\n      background-repeat: no-repeat;\r\n      background-position: center;\r\n    }\r\n\r\n    .container {\r\n      margin-left: 20px;\r\n      text-align: left;\r\n      .header {\r\n        line-height: 0.8rem;\r\n        font-size: 1.5em;\r\n      }\r\n      .text {\r\n        max-width: 600px;\r\n        font-size: 1.0em;\r\n      }\r\n      .used {\r\n        max-width: 600px;\r\n        font-size: 1.0em;\r\n        margin-bottom: 25px;\r\n      }\r\n      .btn {\r\n        background-color: black;\r\n        border-radius: 5px;\r\n        padding: 10px;\r\n        line-height: 0;\r\n        text-decoration: none;\r\n        color: white;\r\n        text-transform: uppercase;\r\n        font-size: 0.80rem;\r\n        letter-spacing: 0.02em;\r\n      }\r\n      .seperator {\r\n        margin-left: 10px;\r\n      }\r\n\r\n      @include media(\">=750px\", \"<=1300px\") {\r\n        text-align: center;\r\n        margin-left: 0px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",".about-container {\r\n  margin-top: 10vh;\r\n  width: 80vw;\r\n  padding: 20px;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  text-align: left;\r\n  .about-contents {\r\n    h1 {\r\n      margin: 0 auto;\r\n      font-size: 3.5em;\r\n    }\r\n    p {\r\n      max-width: 49rem;\r\n      font-size: 1em;\r\n    }\r\n  }\r\n  .about-img {\r\n    margin-left: 60px;\r\n    width: 160px;\r\n    height: 160px;\r\n    overflow: hidden !important;\r\n    background-size: contain;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n  }\r\n  @include media(\">=250px\", \"<lgphone\") {\r\n    margin: 0 auto;\r\n    flex-wrap: wrap;\r\n    margin-top: 40px;\r\n    .about-contents {\r\n      order: 2;\r\n      text-align: center;\r\n      margin: auto;\r\n    }\r\n    .about-img {\r\n      order: 1;\r\n      margin-bottom: 30px;\r\n      margin-left: 0;\r\n    }\r\n  }\r\n  @include media(\">=lgphone\", \"<tablet\") {\r\n    margin: 0 auto;\r\n    flex-wrap: wrap;\r\n    margin-top: 40px;\r\n    .about-contents {\r\n      order: 2;\r\n      text-align: center;\r\n      margin: auto;\r\n    }\r\n    .about-img {\r\n      order: 1;\r\n      margin-bottom: 30px;\r\n      margin-left: 0;\r\n    }\r\n  }\r\n  @include media(\">=tablet\", \"<desktop\") {\r\n    margin: 0 auto;\r\n    flex-wrap: wrap;\r\n    margin-top: 40px;\r\n    .about-contents {\r\n      order: 2;\r\n      text-align: center;\r\n      margin: auto;\r\n    }\r\n    .about-img {\r\n      order: 1;\r\n      margin-bottom: 30px;\r\n      margin-left: 0;\r\n    }\r\n  }\r\n}\r\n",".skill-top {\r\n  width: 80vw;\r\n  padding: 20px 20px 85px 20px;\r\n  margin: 0 auto;\r\n  margin-top: 8vh;\r\n  h1 {\r\n    margin-bottom: 10px;\r\n  }\r\n}\r\n\r\n.skills-content {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: flex-start;\r\n  div {\r\n    max-width: 260px;\r\n    padding: 5px;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n    h3 {\r\n      font-size: 1.35rem;\r\n    }\r\n    p {\r\n      font-size: 1rem;\r\n    }\r\n  }\r\n  @include media(\">=250px\", \"<lgphone\") {\r\n    flex-direction: column;\r\n  }\r\n  @include media(\">=lgphone\", \"<tablet\") {\r\n    flex-direction: column;\r\n  }\r\n  @include media(\">=tablet\", \"<desktop\") {\r\n    flex-wrap: wrap;\r\n  }\r\n}\r\n",".footer-Full {\r\n  padding: 20px;\r\n  margin-bottom: 80px;\r\n\r\n  h1 {\r\n    margin-bottom: 37px;\r\n  }\r\n\r\n  .footer-Link {\r\n    color: black;\r\n    font-size: 1.2em;\r\n    @include media(\">=250px\", \"<lgphone\") {\r\n      font-size: 1em;\r\n    }\r\n  }\r\n  .site-wrapper {\r\n    //display: flex;\r\n    //width: 10em;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    margin: 0 auto;\r\n    margin-top: 30px;\r\n\r\n    .logos {\r\n      cursor: pointer;\r\n      color: black;\r\n    }\r\n  }\r\n}\r\n","@import \"./include-media.scss\";\r\n@import \"header.scss\";\r\n@import \"projects.scss\";\r\n@import \"about.scss\";\r\n@import \"skills.scss\";\r\n@import \"footer.scss\";\r\n@import url(\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Open+Sans&display=swap\");\r\n\r\n* {\r\n  font-family: \"Montserrat\";\r\n}\r\n\r\nhtml {\r\n  font-size: 16px;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n  overflow-y: scroll;\r\n  overflow-x: hidden;\r\n  text-align: center;\r\n}\r\n\r\ncode {\r\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\r\n    monospace;\r\n}\r\n"]}